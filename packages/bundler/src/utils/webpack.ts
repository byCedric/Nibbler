import { getManagedExtensions } from '@expo/config/paths';
import path from 'path';
import { Configuration, DefinePlugin } from 'webpack';

import { BundleOptions, BundlePlatform, BundleRequest } from '../types';
import { getEntryPoints } from './package';

/**
 * Create the webpack configuration for a single platform.
 * This will take exports and entry points into account.
 */
export async function getPlatformConfig(
  platform: BundlePlatform,
  request: BundleRequest,
  options: BundleOptions
): Promise<Configuration> {
  return {
    context: options.cwd,
    mode: 'development',
    devtool: 'source-map',
    entry: await getEntryPoints(request, options),
    output: {
      path: path.join(options.cwd, 'build', platform),
      filename: `[name].js`,
      sourceMapFilename: `[name].js.map`,
      libraryTarget: 'commonjs',
    },
    optimization: {
      moduleIds: 'size',
      minimize: false,
      nodeEnv: false, // Important to not-leak envvars
    },
    resolve: {
      extensions: getPlatformExtensions(platform),
      mainFields: getPlatformMainFields(platform),
    },
    externals: getPlatformExternals(platform),
    plugins: [
      // Force production mode in packages
      new DefinePlugin({
        __DEV__: JSON.stringify(false),
        'process.env': { NODE_ENV: JSON.stringify('production') },
      }),
    ],
    module: {
      rules: [
        {
          test: /\.[cm]?(js|tsx?)$/,
          parser: { requireEnsure: false },
        },
        {
          test: /\.mjs/,
          resolve: { fullySpecified: false },
        },
        {
          test: /\.(js|jsx|ts|tsx)$/,
          use: {
            loader: require.resolve('babel-loader'),
            options: {
              babelrc: false,
              configFile: false,
              presets: [require.resolve('babel-preset-expo')],
            },
          },
        },
      ],
    },
  };
}

/**
 * Get the list of file extensions to use for a specific platform.
 * This list should be generated by `@expo/config/paths` to stay close to normal Expo behavior.
 *
 * @todo Add support for Exotic mode, after the experimental stage.
 * @see https://github.com/expo/expo/blob/86998e12bcaca25ff507621d815b081c6060523e/packages/%40expo/metro-config/src/ExpoMetroConfig.ts#L181-L185
 */
export function getPlatformExtensions(platform: BundlePlatform): string[] {
  const extensions = getManagedExtensions([platform], {
    isTS: true,
    isReact: true,
    isModern: false,
  });

  return extensions.map((extension) => `.${extension}`);
}

/**
 * Get the package main fields for a specific platform.
 * This list should be similar to `@expo/metro-config` to stay close to normal Expo behavior.
 *
 * @todo Add support for Exotic mode, after the experimental stage.
 * @see https://github.com/expo/expo/blob/86998e12bcaca25ff507621d815b081c6060523e/packages/%40expo/metro-config/src/ExpoMetroConfig.ts#L199-L202
 */
export function getPlatformMainFields(platform: BundlePlatform): string[] {
  const mainFields = ['browser', 'module', 'main'];

  if (platform !== 'web') {
    mainFields.unshift('react-native');
  }

  return mainFields;
}

// todo: move this to an external package, like snack-config
export function getPlatformExternals(platform: BundlePlatform): (string | RegExp)[] {
  return [
    /^react(\/.*)?/,
    /^react-native(\/.*)?/,
    /^react-native-web(\/.*)?/,
    'react-native-gesture-handler',
    'react-native-maps',
    'react-native-reanimated',
    'react-native-safe-area-context',
    'react-native-screens',
    'react-native-svg',
    'react-native-vector-icons',
    'lottie-react-native',
    'expo-ads-admob',
    'expo-ads-facebook',
    'expo-analytics-amplitude',
    'expo-app-auth',
    'expo-asset',
    'expo-av',
    'expo-background-fetch',
    'expo-barcode-scanner',
    'expo-blur',
    'expo-calendar',
    'expo-camera',
    'expo-constants',
    'expo-contacts',
    'expo-document-picker',
    'expo-face-detector',
    'expo-facebook',
    'expo-file-system',
    'expo-font',
    'expo-gl',
    'expo-google-sign-in',
    'expo-haptics',
    'expo-image-manipulator',
    'expo-image-picker',
    'expo-intent-launcher',
    'expo-keep-awake',
    'expo-linear-gradient',
    'expo-linking',
    'expo-local-authentication',
    'expo-localization',
    'expo-location',
    'expo-mail-composer',
    'expo-media-library',
    'expo-permissions',
    'expo-print',
    'expo-processing',
    'expo-secure-store',
    'expo-sharing',
    'expo-sms',
    'expo-speech',
    'expo-task-manager',
    'expo-web-browser',
    '@expo/vector-icons',
    '@react-navigation/native',
  ];
}
